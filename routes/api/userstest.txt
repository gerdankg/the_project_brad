const express = require('express');
const router = express.Router();
const gravatar = require('gravatar'); /// if u didn't then npm instal gravatar
var bcrypt = require('bcryptjs');
const jwt = require('jsonwebtoken');
const config = require('config');

const { check, validationResult } = require('express-validator/check');

const User = require('../../models/User');
// @route       POST API / users
// @description register user
router.post(
  '/',
  [
    check('name', 'Name is required')
      .not()
      .isEmpty(),
    check('email', 'Please insert valid email').isEmail(),
    check('password', 'Please enter a password with 6 or more').isLength({
      min: 6
    })
  ],
  async (req, res) => {
    const errors = validationResult(req);
    if (!errors.isEmpty()) {
      return res.status(400).json({ errors: errors.array() });
    }
    const { name, email, password } = req.body;

    try {
      let user = await User.findOne({ email });
      if (user) {
        return res
          .status(400)
          .json({ errors: [{ msg: 'User already exists' }] });
      }
      const avatar = gravatar.url(email, {
        s: '200', ///default size
        r: 'pg', ///rating
        d: 'mm' //default
      });
      user = new User({
        name,
        email,
        avatar,
        password
      });

      const salt = await bcrypt.genSaltSync(10); ///more u have more security

      user.password = await brcypt.hash(password, salt); //create hash

      await user.save(); /// add await (what gives us/return/ a promise in front)

      const payload = {
        user: {
          id: user.id
        }
      };
      jwt.sign(
        payload,
        config.get('jwtSecret'),
        {
          expiresIn: 360000
        },
        (err, token) => {
          if (err) throw err;
          res.json({ token });
        }
      );

      //..res.send("User registered");
    } catch (err) {
      console.error(err.message);
      res.status(500).send('Server error');
    }
  }
  //see if user exists;2: get users gravatar; encrypt password;return jsonwebtoken;
);
module.exports = router;
